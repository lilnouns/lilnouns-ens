name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  FOUNDRY_PROFILE: default

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.0.0'

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.local/share/pnpm/store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            **/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Cache Turbo
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check formatting
        run: pnpm format:check

      - name: Run linting
        run: pnpm lint

  contracts-test:
    name: Smart Contract Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.0.0'

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.local/share/pnpm/store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            **/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Cache Foundry
        uses: actions/cache@v4
        with:
          path: |
            ~/.foundry/bin
            ~/.foundry/cache
            packages/contracts/cache
            packages/contracts/out
          key: ${{ runner.os }}-foundry-${{ hashFiles('packages/contracts/foundry.toml', 'packages/contracts/remappings.txt') }}
          restore-keys: |
            ${{ runner.os }}-foundry-

      - name: Cache Turbo
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-contracts-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-contracts-
            ${{ runner.os }}-turbo-

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build contracts with Forge
        working-directory: packages/contracts
        run: pnpm build:forge

      - name: Build contracts with Hardhat
        working-directory: packages/contracts
        run: pnpm build:hardhat

      - name: Run tests in parallel
        working-directory: packages/contracts
        run: |
          # Run Forge and Hardhat tests in parallel for faster feedback
          pnpm test:forge &
          FORGE_PID=$!
          pnpm test:hardhat &
          HARDHAT_PID=$!
          
          # Wait for both test suites to complete
          wait $FORGE_PID
          FORGE_EXIT=$?
          wait $HARDHAT_PID
          HARDHAT_EXIT=$?
          
          # Check if any test suite failed
          if [ $FORGE_EXIT -ne 0 ] || [ $HARDHAT_EXIT -ne 0 ]; then
            echo "One or more test suites failed"
            exit 1
          fi
          
          echo "All test suites passed successfully"

      - name: Generate gas report
        working-directory: packages/contracts
        run: forge test --gas-report

      - name: Analyze contract sizes
        working-directory: packages/contracts
        run: |
          echo "## Contract Size Analysis" >> $GITHUB_STEP_SUMMARY
          echo "| Contract | Size (bytes) | Size (KB) | Optimization Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------------|-----------|---------------------|" >> $GITHUB_STEP_SUMMARY
          
          # Analyze contract sizes from Forge build output
          forge build --sizes 2>/dev/null | grep -E "\.sol:" | while read line; do
            contract=$(echo "$line" | awk '{print $1}' | sed 's/.*\///' | sed 's/\.sol://')
            size_bytes=$(echo "$line" | awk '{print $2}')
            size_kb=$(echo "scale=2; $size_bytes / 1024" | bc -l 2>/dev/null || echo "N/A")
            
            # Determine optimization status
            if [ "$size_bytes" -gt 24576 ]; then
              status="⚠️ Large (>24KB)"
            elif [ "$size_bytes" -gt 16384 ]; then
              status="⚡ Medium (>16KB)"
            else
              status="✅ Optimal (<16KB)"
            fi
            
            echo "| $contract | $size_bytes | $size_kb | $status |" >> $GITHUB_STEP_SUMMARY
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Size Optimization Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "- Contracts >24KB may hit deployment limits on some networks" >> $GITHUB_STEP_SUMMARY
          echo "- Consider using libraries for shared functionality" >> $GITHUB_STEP_SUMMARY
          echo "- Remove unused imports and functions" >> $GITHUB_STEP_SUMMARY
          echo "- Use custom errors instead of string messages" >> $GITHUB_STEP_SUMMARY

  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: contracts-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.0.0'

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.local/share/pnpm/store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            **/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Cache Foundry
        uses: actions/cache@v4
        with:
          path: |
            ~/.foundry/bin
            ~/.foundry/cache
            packages/contracts/cache
            packages/contracts/out
          key: ${{ runner.os }}-foundry-${{ hashFiles('packages/contracts/foundry.toml', 'packages/contracts/remappings.txt') }}
          restore-keys: |
            ${{ runner.os }}-foundry-

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache Python packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Slither
        run: |
          python -m pip install --upgrade pip
          pip install slither-analyzer

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Slither analysis
        working-directory: packages/contracts
        run: slither . --config-file slither.config.json --sarif results.sarif
        continue-on-error: true

      - name: Upload Slither SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: packages/contracts/results.sarif
          category: slither

  build-and-compile:
    name: Build and Compile Artifacts
    runs-on: ubuntu-latest
    needs: [lint-and-format, contracts-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.0.0'

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.local/share/pnpm/store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            **/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Cache Foundry
        uses: actions/cache@v4
        with:
          path: |
            ~/.foundry/bin
            ~/.foundry/cache
            packages/contracts/cache
            packages/contracts/out
          key: ${{ runner.os }}-foundry-${{ hashFiles('packages/contracts/foundry.toml', 'packages/contracts/remappings.txt') }}
          restore-keys: |
            ${{ runner.os }}-foundry-

      - name: Cache Turbo
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-build-
            ${{ runner.os }}-turbo-

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            packages/contracts/artifacts
            packages/contracts/typechain-types
            apps/web/dist
            apps/web/.next
          key: ${{ runner.os }}-build-artifacts-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-artifacts-

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build all packages
        run: pnpm build:contracts

      - name: Build web application
        working-directory: apps/web
        run: pnpm build

      - name: Analyze web bundle sizes
        working-directory: apps/web
        run: |
          echo "## Web Bundle Size Analysis" >> $GITHUB_STEP_SUMMARY
          echo "| File | Size | Gzipped | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|---------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Analyze bundle sizes if dist directory exists
          if [ -d "dist" ]; then
            find dist -name "*.js" -o -name "*.css" | while read file; do
              if [ -f "$file" ]; then
                size=$(du -h "$file" | cut -f1)
                gzipped=$(gzip -c "$file" | wc -c | numfmt --to=iec)
                filename=$(basename "$file")
                
                # Determine status based on file size
                size_bytes=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo "0")
                if [ "$size_bytes" -gt 1048576 ]; then
                  status="⚠️ Large (>1MB)"
                elif [ "$size_bytes" -gt 524288 ]; then
                  status="⚡ Medium (>512KB)"
                else
                  status="✅ Optimal"
                fi
                
                echo "| $filename | $size | $gzipped | $status |" >> $GITHUB_STEP_SUMMARY
              fi
            done
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Bundle Optimization Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "- Use code splitting for large bundles" >> $GITHUB_STEP_SUMMARY
          echo "- Enable tree shaking to remove unused code" >> $GITHUB_STEP_SUMMARY
          echo "- Consider lazy loading for non-critical components" >> $GITHUB_STEP_SUMMARY
          echo "- Optimize images and use modern formats (WebP, AVIF)" >> $GITHUB_STEP_SUMMARY

      - name: Upload contract artifacts
        uses: actions/upload-artifact@v4
        with:
          name: contract-artifacts
          path: |
            packages/contracts/out/
            packages/contracts/artifacts/
            packages/contracts/cache/
          retention-days: 30

      - name: Upload web build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: apps/web/dist/
          retention-days: 30

  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    needs: contracts-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.0.0'

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate coverage report
        working-directory: packages/contracts
        run: forge coverage --report lcov

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: packages/contracts/lcov.info
          flags: contracts
          name: contract-coverage
          fail_ci_if_error: false

  deploy-testnet:
    name: Deploy to Testnet
    runs-on: ubuntu-latest
    needs: [build-and-compile, security-analysis]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: testnet
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.0.0'

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Deploy to Sepolia
        working-directory: packages/contracts
        env:
          SEPOLIA_RPC_URL: ${{ secrets.SEPOLIA_RPC_URL }}
          PRIVATE_KEY: ${{ secrets.TESTNET_PRIVATE_KEY }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
        run: |
          # Add deployment script here when ready
          echo "Testnet deployment would run here"

  deploy-mainnet:
    name: Deploy to Mainnet
    runs-on: ubuntu-latest
    needs: [build-and-compile, security-analysis]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: mainnet
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.0.0'

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Deploy to Mainnet
        working-directory: packages/contracts
        env:
          MAINNET_RPC_URL: ${{ secrets.MAINNET_RPC_URL }}
          PRIVATE_KEY: ${{ secrets.MAINNET_PRIVATE_KEY }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
        run: |
          # Add deployment script here when ready
          echo "Mainnet deployment would run here"
