# =====================================================================
# 🚀 DEPLOY WEB APPLICATION WORKFLOW
# =====================================================================
name: 🚀 Deploy Web Application

# ---------------------------------------------------------------------
# 📋 WORKFLOW TRIGGERS
# ---------------------------------------------------------------------
on:
  workflow_dispatch: # 👆 Allow manual triggering
  release:
    types: [published] # 📦 Run when a new release is published

# ---------------------------------------------------------------------
# 🔐 PERMISSIONS (required for GitHub Pages)
# ---------------------------------------------------------------------
permissions:
  contents: read
  pages: write
  id-token: write

# ---------------------------------------------------------------------
# 💼 JOBS
# ---------------------------------------------------------------------
jobs:
  deploy:
    name: 🔄 Deploy Application
    runs-on: ubuntu-latest
    timeout-minutes: 15 # ⏱️ Set a timeout to prevent long-running jobs
    environment:
      name: github-pages
      url: ${{ steps.pages_deploy.outputs.page_url }}

    # -------------------------------------------------------------
    # 🌍 ENVIRONMENT VARIABLES (Frontend build-time)
    # -------------------------------------------------------------
    env:
      NODE_ENV: production
      # Base path for assets when served under a subfolder (e.g., GitHub Pages)
      # If not provided via repo variables, a default is computed below.
      VITE_BASE_PATH: ${{ vars.VITE_BASE_PATH }}
      # Chain selection (optional): set one of these
      VITE_CHAIN_ID: ${{ vars.VITE_CHAIN_ID }}
      VITE_CHAIN_NAME: ${{ vars.VITE_CHAIN_NAME }}
      # WalletConnect (usually secret)
      VITE_WC_PROJECT_ID: ${{ secrets.VITE_WC_PROJECT_ID }}
      # Unified endpoints
      VITE_RPC_HTTP_URL: ${{ secrets.VITE_RPC_HTTP_URL }}
      VITE_SUBGRAPH_URL: ${{ vars.VITE_SUBGRAPH_URL }}

    steps:
      # 📥 CHECKOUT
      - name: 📥 Checkout repository code
        uses: actions/checkout@v5.0.0

      # 🔧 Compute defaults and validate required environment
      - name: 🔧 Set base path and defaults
        shell: bash
        run: |
          set -euo pipefail
          REPO_NAME="${GITHUB_REPOSITORY#*/}"
          OWNER="${GITHUB_REPOSITORY%%/*}"

          # VITE_BASE_PATH: use repo var if set, else default to "/<repo>/"
          if [ -n "${VITE_BASE_PATH:-}" ]; then
            echo "Using VITE_BASE_PATH from repo vars: $VITE_BASE_PATH"
          else
            VITE_BASE_PATH="/${REPO_NAME}/"
            echo "VITE_BASE_PATH not provided; defaulting to $VITE_BASE_PATH"
            echo "VITE_BASE_PATH=$VITE_BASE_PATH" >> "$GITHUB_ENV"
          fi

          # Site metadata defaults (override via repo variables if desired)
          : "${VITE_SITE_TITLE:=Lil Nouns ENS}"
          : "${VITE_SITE_DESCRIPTION:=Claim subnames under lilnouns.eth}"
          # Defaults may be relative; we will convert to absolute URLs below
          : "${VITE_OG_IMAGE:=og.png}"
          : "${VITE_FC_IMAGE:=$VITE_OG_IMAGE}"
          : "${VITE_FC_BUTTON:=Open App}"
          : "${VITE_FC_SPLASH_ICON:=splash.png}"
          : "${VITE_FC_SPLASH_BG:=#f6e6ee}"
          # Compute site URL with base path as default
          : "${VITE_SITE_URL:=https://${OWNER}.github.io/${REPO_NAME}}"
          : "${VITE_FC_LAUNCH_URL:=$VITE_SITE_URL}"

          # Ensure absolute URLs for Open Graph & splash images
          to_abs() {
            val="$1"
            if [ -z "$val" ]; then
              echo ""
              return
            fi
            case "$val" in
              *://*) echo "$val" ;;
              *)
                val="${val#/}"
                echo "${VITE_SITE_URL%/}/$val"
                ;;
            esac
          }

          VITE_OG_IMAGE="$(to_abs "$VITE_OG_IMAGE")"
          VITE_FC_IMAGE="$(to_abs "$VITE_FC_IMAGE")"
          VITE_FC_SPLASH_ICON="$(to_abs "$VITE_FC_SPLASH_ICON")"

          {
            echo "VITE_SITE_TITLE=$VITE_SITE_TITLE"
            echo "VITE_SITE_DESCRIPTION=$VITE_SITE_DESCRIPTION"
            echo "VITE_SITE_URL=$VITE_SITE_URL"
            echo "VITE_OG_IMAGE=$VITE_OG_IMAGE"
            echo "VITE_FC_IMAGE=$VITE_FC_IMAGE"
            echo "VITE_FC_BUTTON=$VITE_FC_BUTTON"
            echo "VITE_FC_LAUNCH_URL=$VITE_FC_LAUNCH_URL"
            echo "VITE_FC_SPLASH_ICON=$VITE_FC_SPLASH_ICON"
            echo "VITE_FC_SPLASH_BG=$VITE_FC_SPLASH_BG"
          } >> "$GITHUB_ENV"

      - name: ✅ Validate required env vars
        shell: bash
        run: |
          set -euo pipefail
          missing=()
          if [ -z "${VITE_SUBGRAPH_URL:-}" ]; then missing+=(VITE_SUBGRAPH_URL); fi
          # At least one of VITE_CHAIN_ID or VITE_CHAIN_NAME must be set
          if [ -z "${VITE_CHAIN_ID:-}" ] && [ -z "${VITE_CHAIN_NAME:-}" ]; then
            echo "Neither VITE_CHAIN_ID nor VITE_CHAIN_NAME is set"
            missing+=(VITE_CHAIN_ID_or_VITE_CHAIN_NAME)
          fi
          if [ ${#missing[@]} -gt 0 ]; then
            echo "Missing required environment variables: ${missing[*]}" >&2
            exit 1
          fi

      # 🛠️ SETUP ENVIRONMENT
      - name: 🔧 Install Foundry
        uses: foundry-rs/foundry-toolchain@v1.4.0
        with:
          version: nightly

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v4.1.0
        with:
          run_install: false

      - name: 🟢 Install Node.js
        uses: actions/setup-node@v5
        with:
          cache: "pnpm"
          node-version-file: "package.json"

      # 📚 DEPENDENCIES
      - name: 📚 Install dependencies
        run: pnpm install

      # 🏗️ BUILD
      - name: 🏗️ Build the apps and packages
        run: pnpm run build

      # 🏗️ Build a Pinme variant with base path set to "/"
      - name: 🏗️ Build (Pinme variant, base=/)
        env:
          VITE_BASE_PATH: "/"
        run: |
          set -euo pipefail
          cd apps/web
          # Build a separate output folder to avoid overwriting the Pages artifact
          pnpm rimraf dist-pinme
          pnpm vite build --outDir dist-pinme

      # 🧪 TEST
      - name: 🧪 Execute tests
        run: pnpm run test

      # 🚀 DEPLOY TO PINME
      - name: 🚀 Deploy to pinme
        run: cd ./apps/web/ && pnpm pinme upload dist-pinme

      # 🌐 GITHUB PAGES DEPLOYMENT
      - name: ⚙️ Configure GitHub Pages
        uses: actions/configure-pages@v5.0.0

      - name: 📦 Upload Pages artifact
        uses: actions/upload-pages-artifact@v3.0.0
        with:
          path: apps/web/dist

      - name: 🌐 Deploy to GitHub Pages
        id: pages_deploy
        uses: actions/deploy-pages@v4.0.0
