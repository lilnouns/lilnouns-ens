# =====================================================================
# 🚀 DEPLOY WEB APPLICATION — Split Jobs (PinMe | GitHub Pages)
# =====================================================================
name: 🚀 Deploy Web Application

# ---------------------------------------------------------------------
# 📋 WORKFLOW TRIGGERS
# - Manual dispatch for ad-hoc deploys
# - Release published for versioned deploys
# Each job uses path filters (via a changes detector) to decide whether
# to run on a given event.
# ---------------------------------------------------------------------
on:
  workflow_dispatch:
  release:
    types: [published]

# ---------------------------------------------------------------------
# 🔐 PERMISSIONS (required for GitHub Pages)
# ---------------------------------------------------------------------
permissions:
  contents: read
  pages: write
  id-token: write

# ---------------------------------------------------------------------
# 💼 JOBS
# ---------------------------------------------------------------------
jobs:
  # -------------------------------------------------------------
  # 🔎 Detect changed paths and expose booleans for each target
  # -------------------------------------------------------------
  changes:
    name: 🔎 Detect changes
    runs-on: ubuntu-latest
    outputs:
      pinme: ${{ steps.filter.outputs.pinme }}
      pages: ${{ steps.filter.outputs.pages }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0

      - name: 🧮 Compute compare range (release)
        id: cmp
        if: ${{ github.event_name == 'release' }}
        shell: bash
        run: |
          set -euo pipefail
          git fetch --tags --force

          CUR_TAG="${{ github.event.release.tag_name }}"
          REF="$CUR_TAG"

          # Find previous tag; if none, compare to repo root commit
          PREV_TAG="$(git describe --tags --abbrev=0 "${CUR_TAG}^" 2>/dev/null || true)"
          if [ -n "$PREV_TAG" ]; then
            BASE="$PREV_TAG"
          else
            BASE="$(git rev-list --max-parents=0 HEAD)"
          fi

          echo "base=$BASE" >> "$GITHUB_OUTPUT"
          echo "ref=$REF" >> "$GITHUB_OUTPUT"

      - name: 🔍 Paths filter
        id: filter
        uses: dorny/paths-filter@v3.0.2
        with:
          # For release events, compare previous tag -> current tag.
          # For other events, these resolve to empty and action uses its defaults.
          base: ${{ steps.cmp.outputs.base }}
          ref: ${{ steps.cmp.outputs.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: |
            pinme:
              - 'apps/web/**'
              - 'packages/ui/**'
              - 'apps/web/vite.config.ts'
              - 'apps/web/index.html'
              - '.github/workflows/deploy.yml'
              - 'pnpm-lock.yaml'
            pages:
              - 'apps/web/**'
              - 'packages/ui/**'
              - 'apps/web/vite.config.ts'
              - 'apps/web/index.html'
              - 'apps/web/public/**'
              - '.github/workflows/deploy.yml'
              - 'pnpm-lock.yaml'

  # -------------------------------------------------------------
  # 📦 PinMe Deploy (independent job)
  # - Uses base path "/"
  # - Separate cache key and artifact
  # - Includes a deploy-check (dry-run-like validation)
  # -------------------------------------------------------------
  deploy_pinme:
    name: 📦 Deploy to PinMe
    runs-on: ubuntu-latest
    needs: changes
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'release' && needs.changes.outputs.pinme == 'true')
    timeout-minutes: 15
    env:
      NODE_ENV: production
      # Force base path to "/" for PinMe deployments
      VITE_BASE_PATH: "/"
      # Runtime config (override as needed for PinMe)
      VITE_CHAIN_ID: ${{ vars.VITE_CHAIN_ID }}
      VITE_CHAIN_NAME: ${{ vars.VITE_CHAIN_NAME }}
      VITE_WC_PROJECT_ID: ${{ secrets.VITE_WC_PROJECT_ID }}
      VITE_RPC_HTTP_URL: ${{ secrets.VITE_RPC_HTTP_URL }}
      VITE_SUBGRAPH_URL: ${{ vars.VITE_SUBGRAPH_URL }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v5.0.0

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4.1.0
        with:
          run_install: false

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v5.0.0
        with:
          node-version-file: "package.json"
          cache: "pnpm"

      - name: ♻️ Cache pnpm store (PinMe)
        uses: actions/cache@v4.2.4
        with:
          path: ~/.pnpm-store
          key: pnpm-store-${{ runner.os }}-pinme-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-${{ runner.os }}-pinme-

      - name: 📚 Install dependencies
        run: pnpm install

      - name: 🏗️ Build web (base=/)
        run: pnpm -C apps/web build

      - name: 🔎 Deploy-check (dry-run)
        shell: bash
        run: |
          set -euo pipefail
          ls -la apps/web/dist
          # Validate that built asset URLs are absolute (base="/")
          if grep -Eo '<script[^>]+src="/[^"]+"' apps/web/dist/index.html >/dev/null; then
            echo "✅ index.html references absolute asset paths"
          else
            echo "❌ Expected absolute asset paths in index.html (base=/)" >&2
            echo "--- index.html (head snippet) ---"
            sed -n '1,80p' apps/web/dist/index.html || true
            exit 1
          fi
          # Optional manifest presence
          test -f apps/web/dist/.vite/manifest.json && echo "✅ Vite manifest present" || echo "ℹ️ No manifest (ok if disabled)"

      - name: 📦 Upload PinMe artifact
        uses: actions/upload-artifact@v4.0.0
        with:
          name: pinme-dist
          path: apps/web/dist

      - name: 🚀 Deploy to PinMe
        run: cd ./apps/web/ && pnpm pinme upload dist

      - name: 📝 Write deployment summary (PinMe)
        shell: bash
        run: |
          BRANCH="${GITHUB_REF_NAME:-N/A}"
          SHORT_SHA="${GITHUB_SHA:-unknown}"
          SHORT_SHA="${SHORT_SHA:0:7}"
          PR_NUMBER="${{ github.event.pull_request.number || '' }}"
          [ -z "$PR_NUMBER" ] && PR_NUMBER="N/A"
          if [ "${{ github.event_name }}" = "release" ]; then
            ENVIRONMENT="production"
          else
            ENVIRONMENT="staging"
          fi

          PINME_URL="Not available"

          {
            echo "### Deployment Summary — PinMe"
            echo "- App: apps/web"
            echo "- Environment: $ENVIRONMENT"
            echo "- Production URL: $PINME_URL"
            echo "- Preview/PR URL: Not available"
            echo "- Branch: $BRANCH"
            echo "- Commit: $SHORT_SHA"
            echo "- PR: $PR_NUMBER"
          } >> "$GITHUB_STEP_SUMMARY"

  # -------------------------------------------------------------
  # 🌐 GitHub Pages Deploy (independent job)
  # - Computes a default base path if not provided
  # - Separate cache key and artifact
  # - Includes a deploy-check using actions/deploy-pages dry-run
  # -------------------------------------------------------------
  deploy_pages:
    name: 🌐 Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: changes
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'release' && needs.changes.outputs.pages == 'true')
    timeout-minutes: 15
    environment:
      name: github-pages
      url: ${{ steps.pages_deploy.outputs.page_url }}
    env:
      NODE_ENV: production
      VITE_BASE_PATH: ${{ vars.VITE_BASE_PATH }}
      VITE_CHAIN_ID: ${{ vars.VITE_CHAIN_ID }}
      VITE_CHAIN_NAME: ${{ vars.VITE_CHAIN_NAME }}
      VITE_WC_PROJECT_ID: ${{ secrets.VITE_WC_PROJECT_ID }}
      VITE_RPC_HTTP_URL: ${{ secrets.VITE_RPC_HTTP_URL }}
      VITE_SUBGRAPH_URL: ${{ vars.VITE_SUBGRAPH_URL }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v5.0.0

      - name: 🔧 Compute base path and site defaults
        shell: bash
        run: |
          set -euo pipefail
          REPO_NAME="${GITHUB_REPOSITORY#*/}"
          OWNER="${GITHUB_REPOSITORY%%/*}"

          if [ -n "${VITE_BASE_PATH:-}" ]; then
            echo "Using VITE_BASE_PATH from repo vars: $VITE_BASE_PATH"
          else
            VITE_BASE_PATH="/${REPO_NAME}/"
            echo "VITE_BASE_PATH not provided; defaulting to $VITE_BASE_PATH"
            echo "VITE_BASE_PATH=$VITE_BASE_PATH" >> "$GITHUB_ENV"
          fi

          : "${VITE_SITE_TITLE:=Lil Nouns ENS}"
          : "${VITE_SITE_DESCRIPTION:=Claim subnames under lilnouns.eth}"
          : "${VITE_OG_IMAGE:=og.png}"
          : "${VITE_FC_IMAGE:=$VITE_OG_IMAGE}"
          : "${VITE_FC_BUTTON:=Open App}"
          : "${VITE_FC_SPLASH_ICON:=splash.png}"
          : "${VITE_FC_SPLASH_BG:=#f6e6ee}"
          : "${VITE_SITE_URL:=https://${OWNER}.github.io/${REPO_NAME}}"
          : "${VITE_FC_LAUNCH_URL:=$VITE_SITE_URL}"

          to_abs() {
            val="$1"
            if [ -z "$val" ]; then echo ""; return; fi
            case "$val" in
              *://*) echo "$val" ;;
              *) val="${val#/}"; echo "${VITE_SITE_URL%/}/$val" ;;
            esac
          }

          VITE_OG_IMAGE="$(to_abs "$VITE_OG_IMAGE")"
          VITE_FC_IMAGE="$(to_abs "$VITE_FC_IMAGE")"
          VITE_FC_SPLASH_ICON="$(to_abs "$VITE_FC_SPLASH_ICON")"

          {
            echo "VITE_SITE_TITLE=$VITE_SITE_TITLE"
            echo "VITE_SITE_DESCRIPTION=$VITE_SITE_DESCRIPTION"
            echo "VITE_SITE_URL=$VITE_SITE_URL"
            echo "VITE_OG_IMAGE=$VITE_OG_IMAGE"
            echo "VITE_FC_IMAGE=$VITE_FC_IMAGE"
            echo "VITE_FC_BUTTON=$VITE_FC_BUTTON"
            echo "VITE_FC_LAUNCH_URL=$VITE_FC_LAUNCH_URL"
            echo "VITE_FC_SPLASH_ICON=$VITE_FC_SPLASH_ICON"
            echo "VITE_FC_SPLASH_BG=$VITE_FC_SPLASH_BG"
          } >> "$GITHUB_ENV"

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4.1.0
        with:
          run_install: false

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v5.0.0
        with:
          node-version-file: "package.json"
          cache: "pnpm"

      - name: ♻️ Cache pnpm store (Pages)
        uses: actions/cache@v4.2.4
        with:
          path: ~/.pnpm-store
          key: pnpm-store-${{ runner.os }}-pages-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-${{ runner.os }}-pages-

      - name: 📚 Install dependencies
        run: pnpm install

      - name: 🏗️ Build all apps/packages
        run: pnpm run build

      - name: 🔎 Deploy-check (dry-run)
        run: |
          test -d apps/web/dist && echo "✅ Found built Pages artifact"

      - name: ⚙️ Configure GitHub Pages
        uses: actions/configure-pages@v5.0.0

      - name: 📦 Upload Pages artifact (dry-run)
        uses: actions/upload-pages-artifact@v4.0.0
        with:
          path: apps/web/dist

      - name: 🌐 Deploy to GitHub Pages (dry-run)
        id: pages_deploy_dry
        uses: actions/deploy-pages@v4.0.0
        with:
          dry-run: true

      - name: 📦 Upload Pages artifact
        uses: actions/upload-pages-artifact@v4.0.0
        with:
          path: apps/web/dist

      - name: 🌐 Deploy to GitHub Pages
        id: pages_deploy
        uses: actions/deploy-pages@v4.0.0

      - name: 📝 Write deployment summary (GitHub Pages)
        shell: bash
        run: |
          BRANCH="${GITHUB_REF_NAME:-N/A}"
          SHORT_SHA="${GITHUB_SHA:-unknown}"
          SHORT_SHA="${SHORT_SHA:0:7}"
          PR_NUMBER="${{ github.event.pull_request.number || '' }}"
          [ -z "$PR_NUMBER" ] && PR_NUMBER="N/A"
          if [ "${{ github.event_name }}" = "release" ]; then
            ENVIRONMENT="production"
          else
            ENVIRONMENT="staging"
          fi

          PROD_URL="${{ steps.pages_deploy.outputs.page_url || '' }}"
          [ -z "$PROD_URL" ] && PROD_URL="Not available"
          SITE_URL="${VITE_SITE_URL:-}"
          [ -z "$SITE_URL" ] && SITE_URL="Not available"

          {
            echo "### Deployment Summary — GitHub Pages"
            echo "- App: apps/web"
            echo "- Environment: $ENVIRONMENT"
            echo "- Production URL (from deploy): $PROD_URL"
            echo "- Production URL (computed): $SITE_URL"
            echo "- Preview/PR URL: Not available"
            echo "- Branch: $BRANCH"
            echo "- Commit: $SHORT_SHA"
            echo "- PR: $PR_NUMBER"
          } >> "$GITHUB_STEP_SUMMARY"
