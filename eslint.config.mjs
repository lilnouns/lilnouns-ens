// Centralized ESLint flat config for the entire monorepo
// ------------------------------------------------------
// Goals
// - Single source of truth for linting rules and environments
// - TypeScript-aware rules across apps and packages using projectService
// - Sensible defaults for Browser/React (Vite/Next-compatible), Node.js, and Workers
// - Import hygiene, code quality, and developer UX without fighting Prettier
// - Keep CI strict (no warnings), keep DX pleasant

import js from "@eslint/js";
import { fileURLToPath } from "node:url";
import eslintConfigPrettier from "eslint-config-prettier"; // Disables formatting rules that conflict with Prettier
import globals from "globals";
import pluginReact from "eslint-plugin-react";
import pluginReactHooks from "eslint-plugin-react-hooks";
import pluginReactRefresh from "eslint-plugin-react-refresh"; // Vite-style only-export-components guard
import pluginUnicorn from "eslint-plugin-unicorn";
import pluginSonar from "eslint-plugin-sonarjs";
import pluginPerfectionist from "eslint-plugin-perfectionist"; // Natural sort ordering for objects/imports/etc.
import pluginImportX from "eslint-plugin-import-x"; // Import validation in flat config
import { createTypeScriptImportResolver } from "eslint-import-resolver-typescript";
import pluginTurbo from "eslint-plugin-turbo"; // Turbo env var rule
import tseslint from "typescript-eslint";
import eslintReactPlugin from "@eslint-react/eslint-plugin"; // Modern React linting with TS awareness

// Shared TypeScript language options with type-aware linting enabled via projectService.
// ESLint will use the nearest tsconfig.json in each workspace.
const tsTypeAware = {
  languageOptions: {
    parser: tseslint.parser,
    parserOptions: {
      // Use TypeScript’s Project Service to auto-detect tsconfig per workspace.
      projectService: true,
      noWarnOnMultipleProjects: true,
      tsconfigRootDir: fileURLToPath(new URL("./", import.meta.url)),
    },
  },
};

// Import resolver for monorepo packages (apps/* and packages/*)
const importResolver = {
  settings: {
    "import-x/resolver-next": [
      createTypeScriptImportResolver({
        alwaysTryTypes: true,
        project: [
          "apps/*/{ts,js}config.json",
          "packages/*/{ts,js}config.json",
        ],
      }),
    ],
  },
};

export default tseslint.config(
  // 1) Global ignores (generated/output/build artifacts)
  {
    ignores: [
      "**/dist/**",
      "**/build/**",
      "**/.next/**",
      "**/.wrangler/**",
      "**/.turbo/**",
      "**/coverage/**",
      "packages/contracts/**/out/**",
      "packages/contracts/**/artifacts/**",
      // Generated by wagmi codegen
      "apps/web/src/hooks/contracts.ts",
    ],
  },

  // 2) Base JavaScript + Prettier compatibility
  js.configs.recommended,
  eslintConfigPrettier,

  // 3) TypeScript (strict + stylistic, type-aware)
  {
    files: ["**/*.{ts,tsx}"]
  },
  tsTypeAware,
  ...tseslint.configs.strictTypeChecked,
  ...tseslint.configs.stylisticTypeChecked,

  // 4) React + React Hooks + modern React rules with TS
  pluginReact.configs.flat.recommended,
  eslintReactPlugin.configs["recommended-typescript"],
  {
    files: ["**/*.{ts,tsx,jsx}"],
    languageOptions: {
      ...pluginReact.configs.flat.recommended.languageOptions,
      // Browser globals for React apps by default
      globals: {
        ...globals.browser,
      },
    },
    plugins: {
      "react-hooks": pluginReactHooks,
      "react-refresh": pluginReactRefresh,
    },
    rules: {
      // Hooks rules
      ...pluginReactHooks.configs.recommended.rules,
      // Guard components for React Fast Refresh in dev (harmless in prod)
      "react-refresh/only-export-components": ["warn", { allowConstantExport: true }],
      // Modern JSX transform — no need for React in scope
      "react/react-in-jsx-scope": "off",
      // TS handles prop-types
      "react/prop-types": "off",
    },
  },

  // 5) Quality rules: Unicorn, SonarJS, Perfectionist, Import hygiene, Turbo
  {
    plugins: {
      unicorn: pluginUnicorn,
      sonarjs: pluginSonar,
      perfectionist: pluginPerfectionist,
      "import-x": pluginImportX,
      turbo: pluginTurbo,
    },
    ...importResolver,
    rules: {
      // Opinionated quality rules
      ...pluginUnicorn.configs.recommended.rules,
      ...pluginSonar.configs.recommended.rules,
      ...pluginPerfectionist.configs["recommended-natural"].rules,
      ...pluginImportX.configs.recommended.rules,

      // Monorepo: surface accidental process.env access that bypasses Turbo pipeline
      "turbo/no-undeclared-env-vars": "warn",
    },
  },

  // 6) Environments: Node configs, build scripts, and Workers
  // Node / tooling files (configs, scripts, cjs/mjs)
  {
    files: [
      "**/*.{cjs,mjs,js}",
      "**/*.config.{js,ts,mjs,cjs}",
      "scripts/**/*.{js,ts}",
    ],
    languageOptions: {
      globals: {
        ...globals.node,
      },
    },
  },

  // Cloudflare Workers / Service Workers (if any appear in the repo)
  {
    files: [
      "**/workers/**/*.{ts,tsx,js}",
      "**/*worker*.{ts,tsx,js}",
      "functions/**/*.{ts,tsx,js}",
    ],
    languageOptions: {
      globals: {
        ...globals.serviceworker,
        ...globals.worker,
      },
    },
  },

  // 7) Local customizations
  {
    rules: {
      // Prefer warnings for import sorting rather than blocking development
      "perfectionist/sort-objects": "warn",
      "perfectionist/sort-imports": "warn",

      // This repo relies on Prettier; ESLint formatting should stay out of the way
      "arrow-body-style": "off",
      "prefer-arrow-callback": "off",
    },
  },
);
